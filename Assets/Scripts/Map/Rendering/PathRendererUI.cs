using System;
using System.Collections.Generic;
using System.Linq;
using DavidUtils.ExtensionMethods;
using Map.PathFinding;
using UnityEngine;
using UnityEngine.UI.Extensions;

namespace Map.Rendering
{
    // Manage Line Renderer List that represents the Path generated by the PathFindingGenerator
    public class PathRendererUI : MonoBehaviour, IPathRenderer<UILineRenderer>
    {
        [SerializeField] protected List<UILineRenderer> lineRenderers = new();
        [SerializeField] protected UILineRenderer linePrefab;
        
        private RectTransform _parentRectTransform;
        private Terrain _terrain;
        
        // PATH
        private PathGenerator _pathFindingGenerator;
        public int PathCount => lineRenderers.Count;
        public bool IsEmpty => PathCount == 0;

        // Line Parameters
        [SerializeField] private float lineThickness = 1f;
        public float LineThickness
        {
            get => lineThickness;
            set
            {
                lineThickness = value;
                lineRenderers.ForEach(line => { line.LineThickness = value; });
            }
        }

        // ============================= INITIALIZATION =============================
        private void Awake()
        {
            _terrain = Terrain.activeTerrain;
            _parentRectTransform = transform.parent.GetComponent<RectTransform>();
        }

        private void Start()
        {
            _pathFindingGenerator = MapManager.Instance.mainPathFindingGenerator;
            if (_pathFindingGenerator == null) return;

            _pathFindingGenerator.OnPathAdded += AddPath;
            _pathFindingGenerator.OnPathDeleted += RemovePath;
            _pathFindingGenerator.OnPathUpdated += UpdateLine;
            _pathFindingGenerator.OnAllPathsUpdated += UpdateAllLines;
            _pathFindingGenerator.OnPathsCleared += ClearPaths;
            MapManager.Instance.OnZoomMapChanged += HandleOnZoomMapChange;
            
            UpdateAllLines(_pathFindingGenerator.Paths);
        }

        private void OnDestroy()
        {
            // Unsuscribe from events
            if (_pathFindingGenerator != null)
            {
                _pathFindingGenerator.OnPathAdded -= AddPath;
                _pathFindingGenerator.OnPathDeleted -= RemovePath;
                _pathFindingGenerator.OnPathUpdated -= UpdateLine;
                _pathFindingGenerator.OnAllPathsUpdated -= UpdateAllLines;
                _pathFindingGenerator.OnPathsCleared -= ClearPaths;
            }
            if (MapManager.Instance != null) 
                MapManager.Instance.OnZoomMapChanged -= HandleOnZoomMapChange;
            
            // Clear Line Renderer
            ClearPaths();
        }

        // ============================= CRUD =============================

        public void AddPath(Path path, int index = -1)
        {
            if (index == -1) index = lineRenderers.Count;

            UILineRenderer lineRenderer = Instantiate(linePrefab, transform);
            lineRenderers.Insert(index, lineRenderer);

            // Initilize properties
            lineRenderer.LineThickness = lineThickness;

            UpdateLine(path, index);
        }

        public void RemovePath(int index = -1)
        {
            if (index == -1) index = lineRenderers.Count - 1;

            if (Application.isPlaying)
                Destroy(lineRenderers[index].gameObject);
            else
                DestroyImmediate(lineRenderers[index].gameObject);

            lineRenderers.RemoveAt(index);
        }
        
        public void UpdateLine(Path path, int index = -1) =>
            lineRenderers[index].Points = path.GetPathNormalizedPoints(_terrain) // Normalize the Path to the Terrain
                .Select(_parentRectTransform.NormalizedToLocalPoint) // Convert to Local Point
                .ToArray();

        public void UpdateAllLines(Path[] paths)
        {
            for (var i = 0; i < paths.Length; i++)
                if (i >= lineRenderers.Count)
                    AddPath(paths[i]);
                else
                    UpdateLine(paths[i], i);
        }

        public void ClearPaths()
        {
            foreach (UILineRenderer lineRenderer in lineRenderers)
                if (Application.isPlaying)
                    Destroy(lineRenderer.gameObject);
                else
                    DestroyImmediate(lineRenderer.gameObject);
            lineRenderers.Clear();
        }

        // =====================================================================================
        
        // Si el mapa se amplía, la línea debe regular su anchura para que sea constante visualmente
        private void HandleOnZoomMapChange(float zoomAmount)
        {
            foreach (UILineRenderer uiLineRenderer in lineRenderers) uiLineRenderer.LineThickness = lineThickness / zoomAmount;
        }
    }
}